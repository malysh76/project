/*************************************
* File Name          : 1986_map.h
* Author             : 
* Version            : 
* Date               : 
* Description        : This file contains all the peripheral register's definitions
*                      and memory mapping.
********************************************************************************
* THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
* WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
* AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
* INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
* CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
* INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
*******************************************************************************/

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __1986_MAP_H
#define __1986_MAP_H

#ifndef EXT
  #define EXT extern
#endif /* EXT */

/* Includes ------------------------------------------------------------------*/
#include "1986_conf.h"
#include "type.h"
//#include "cortexm3_macro.h"

/* Exported types ------------------------------------------------------------*/
/******************************************************************************/
/*                         Peripheral registers structures                    */
/******************************************************************************/

/*------------------------ DMA Controller ------------------------------------*/
typedef struct
{
	vu32 STATUS;// DMA status
	vu32 CONFIG;// DMA configuration
	vu32 CTRL_BASE_PTR;// Channel control data base pointer
	vu32 ALT_CTRL_BASE_PTR;// Channel alternate control data base pointer
	vu32 WAITONREQ_STATUS;// Channel wait on request status
	vu32 CHNL_SW_REQUEST;// Channel software request
	vu32 CHNL_USEBURST_SET;// Channel useburst set
	vu32 CHNL_USEBURST_CLR;// Channel useburst clear
	vu32 CHNL_REQ_MASK_SET;// Channel request mask set
	vu32 CHNL_REQ_MASK_CLR;// Channel request mask clear
	vu32 CHNL_ENABLE_SET;// Channel enable set
	vu32 CHNL_ENABLE_CLR;// Channel enable clear
	vu32 CHNL_PRI_ALT_SET;// Channel primary-alternate set
	vu32 CHNL_PRI_ALT_CLR;// Channel primary-alternate clear
	vu32 CHNL_PRIORITY_SET;// Channel priority set
	vu32 CHNL_PRIORITY_CLR;// Channel priority clear
	u32 RESERVED0[3];
	vu32 ERR_CLR;// Bus error clear
} DMA_Controller_TypeDef;

typedef struct
{
	vu32 INTEGRATION_CFG;// 
	vu32 RESERVED0;// 
	vu32 STALL_STATUS;// 
	vu32 RESERVED1;// 
	vu32 REQ_STATUS;// 
	vu32 RESERVED2;// 
	vu32 SREQ_STATUS;// 
	vu32 RESERVED3;// 
	vu32 DONE_SET;// 
	vu32 DONE_CLR;// 
	vu32 ACTIVE_SET;// 
	vu32 ACTIVE_CLR;// 
	vu32 RESERVED4[5];// 
	vu32 ERR_SET;// 
} DMA_Test_TypeDef;

typedef struct
{
	vu32 PERIPH_ID4;// Peripheral identification 4
	u32 RESERVED0[3];
	vu32 PERIPH_ID0;
	vu32 PERIPH_ID1;
	vu32 PERIPH_ID2;
	vu32 PERIPH_ID3;
} DMA_Periph_Identification_TypeDef;

typedef struct
{
	vu32 PCELL_ID0;// PrimeCell identification 0
	vu32 PCELL_ID1;
	vu32 PCELL_ID2;
	vu32 PCELL_ID3;
} DMA_PrimeCell_Identification_TypeDef;

// Channel control data structure
typedef struct
{
		u32 PRIMARY_CH0_SOURCE_END_POINTER;
	u32 PRIMARY_CH0_DEST_END_POINTER;
	u32 PRIMARY_CH0_CONTROL;
	u32 PRIMARY_CH0_UNUSED;
		u32 PRIMARY_CH1_SOURCE_END_POINTER;
	u32 PRIMARY_CH1_DEST_END_POINTER;
	u32 PRIMARY_CH1_CONTROL;
	u32 PRIMARY_CH1_UNUSED;
		u32 PRIMARY_CH2_SOURCE_END_POINTER;
	u32 PRIMARY_CH2_DEST_END_POINTER;
	u32 PRIMARY_CH2_CONTROL;
	u32 PRIMARY_CH2_UNUSED;
		u32 PRIMARY_CH3_SOURCE_END_POINTER;
	u32 PRIMARY_CH3_DEST_END_POINTER;
	u32 PRIMARY_CH3_CONTROL;
	u32 PRIMARY_CH3_UNUSED;
		u32 PRIMARY_CH4_SOURCE_END_POINTER;
	u32 PRIMARY_CH4_DEST_END_POINTER;
	u32 PRIMARY_CH4_CONTROL;
	u32 PRIMARY_CH4_UNUSED;
		u32 PRIMARY_CH5_SOURCE_END_POINTER;
	u32 PRIMARY_CH5_DEST_END_POINTER;
	u32 PRIMARY_CH5_CONTROL;
	u32 PRIMARY_CH5_UNUSED;
		u32 PRIMARY_CH6_SOURCE_END_POINTER;
	u32 PRIMARY_CH6_DEST_END_POINTER;
	u32 PRIMARY_CH6_CONTROL;
	u32 PRIMARY_CH6_UNUSED;
		u32 PRIMARY_CH7_SOURCE_END_POINTER;
	u32 PRIMARY_CH7_DEST_END_POINTER;
	u32 PRIMARY_CH7_CONTROL;
	u32 PRIMARY_CH7_UNUSED;
		u32 PRIMARY_CH8_SOURCE_END_POINTER;
	u32 PRIMARY_CH8_DEST_END_POINTER;
	u32 PRIMARY_CH8_CONTROL;
	u32 PRIMARY_CH8_UNUSED;
		u32 PRIMARY_CH9_SOURCE_END_POINTER;
	u32 PRIMARY_CH9_DEST_END_POINTER;
	u32 PRIMARY_CH9_CONTROL;
	u32 PRIMARY_CH9_UNUSED;
		u32 PRIMARY_CH10_SOURCE_END_POINTER;
	u32 PRIMARY_CH10_DEST_END_POINTER;
	u32 PRIMARY_CH10_CONTROL;
	u32 PRIMARY_CH10_UNUSED;
		u32 PRIMARY_CH11_SOURCE_END_POINTER;
	u32 PRIMARY_CH11_DEST_END_POINTER;
	u32 PRIMARY_CH11_CONTROL;
	u32 PRIMARY_CH11_UNUSED;
		u32 PRIMARY_CH12_SOURCE_END_POINTER;
	u32 PRIMARY_CH12_DEST_END_POINTER;
	u32 PRIMARY_CH12_CONTROL;
	u32 PRIMARY_CH12_UNUSED;
		u32 PRIMARY_CH13_SOURCE_END_POINTER;
	u32 PRIMARY_CH13_DEST_END_POINTER;
	u32 PRIMARY_CH13_CONTROL;
	u32 PRIMARY_CH13_UNUSED;
		u32 PRIMARY_CH14_SOURCE_END_POINTER;
	u32 PRIMARY_CH14_DEST_END_POINTER;
	u32 PRIMARY_CH14_CONTROL;
	u32 PRIMARY_CH14_UNUSED;
		u32 PRIMARY_CH15_SOURCE_END_POINTER;
	u32 PRIMARY_CH15_DEST_END_POINTER;
	u32 PRIMARY_CH15_CONTROL;
	u32 PRIMARY_CH15_UNUSED;
		u32 PRIMARY_CH16_SOURCE_END_POINTER;
	u32 PRIMARY_CH16_DEST_END_POINTER;
	u32 PRIMARY_CH16_CONTROL;
	u32 PRIMARY_CH16_UNUSED;
		u32 PRIMARY_CH17_SOURCE_END_POINTER;
	u32 PRIMARY_CH17_DEST_END_POINTER;
	u32 PRIMARY_CH17_CONTROL;
	u32 PRIMARY_CH17_UNUSED;
		u32 PRIMARY_CH18_SOURCE_END_POINTER;
	u32 PRIMARY_CH18_DEST_END_POINTER;
	u32 PRIMARY_CH18_CONTROL;
	u32 PRIMARY_CH18_UNUSED;
		u32 PRIMARY_CH19_SOURCE_END_POINTER;
	u32 PRIMARY_CH19_DEST_END_POINTER;
	u32 PRIMARY_CH19_CONTROL;
	u32 PRIMARY_CH19_UNUSED;
		u32 PRIMARY_CH20_SOURCE_END_POINTER;
	u32 PRIMARY_CH20_DEST_END_POINTER;
	u32 PRIMARY_CH20_CONTROL;
	u32 PRIMARY_CH20_UNUSED;
		u32 PRIMARY_CH21_SOURCE_END_POINTER;
	u32 PRIMARY_CH21_DEST_END_POINTER;
	u32 PRIMARY_CH21_CONTROL;
	u32 PRIMARY_CH21_UNUSED;
		u32 PRIMARY_CH22_SOURCE_END_POINTER;
	u32 PRIMARY_CH22_DEST_END_POINTER;
	u32 PRIMARY_CH22_CONTROL;
	u32 PRIMARY_CH22_UNUSED;
		u32 PRIMARY_CH23_SOURCE_END_POINTER;
	u32 PRIMARY_CH23_DEST_END_POINTER;
	u32 PRIMARY_CH23_CONTROL;
	u32 PRIMARY_CH23_UNUSED;
		u32 PRIMARY_CH24_SOURCE_END_POINTER;
	u32 PRIMARY_CH24_DEST_END_POINTER;
	u32 PRIMARY_CH24_CONTROL;
	u32 PRIMARY_CH24_UNUSED;
		u32 PRIMARY_CH25_SOURCE_END_POINTER;
	u32 PRIMARY_CH25_DEST_END_POINTER;
	u32 PRIMARY_CH25_CONTROL;
	u32 PRIMARY_CH25_UNUSED;
		u32 PRIMARY_CH26_SOURCE_END_POINTER;
	u32 PRIMARY_CH26_DEST_END_POINTER;
	u32 PRIMARY_CH26_CONTROL;
	u32 PRIMARY_CH26_UNUSED;
		u32 PRIMARY_CH27_SOURCE_END_POINTER;
	u32 PRIMARY_CH27_DEST_END_POINTER;
	u32 PRIMARY_CH27_CONTROL;
	u32 PRIMARY_CH27_UNUSED;
		u32 PRIMARY_CH28_SOURCE_END_POINTER;
	u32 PRIMARY_CH28_DEST_END_POINTER;
	u32 PRIMARY_CH28_CONTROL;
	u32 PRIMARY_CH28_UNUSED;
		u32 PRIMARY_CH29_SOURCE_END_POINTER;
	u32 PRIMARY_CH29_DEST_END_POINTER;
	u32 PRIMARY_CH29_CONTROL;
	u32 PRIMARY_CH29_UNUSED;
		u32 PRIMARY_CH30_SOURCE_END_POINTER;
	u32 PRIMARY_CH30_DEST_END_POINTER;
	u32 PRIMARY_CH30_CONTROL;
	u32 PRIMARY_CH30_UNUSED;
		u32 PRIMARY_CH31_SOURCE_END_POINTER;
	u32 PRIMARY_CH31_DEST_END_POINTER;
	u32 PRIMARY_CH31_CONTROL;
	u32 PRIMARY_CH31_UNUSED;
} DMA_PrimaryData_TypeDef;

typedef struct
{
		vu32 ALT_CH0_SOURCE_END_POINTER;
	vu32 ALT_CH0_DEST_END_POINTER;
	vu32 ALT_CH0_CONTROL;
	vu32 ALT_CH0_UNUSED;
		vu32 ALT_CH1_SOURCE_END_POINTER;
	vu32 ALT_CH1_DEST_END_POINTER;
	vu32 ALT_CH1_CONTROL;
	vu32 ALT_CH1_UNUSED;
		vu32 ALT_CH2_SOURCE_END_POINTER;
	vu32 ALT_CH2_DEST_END_POINTER;
	vu32 ALT_CH2_CONTROL;
	vu32 ALT_CH2_UNUSED;
		vu32 ALT_CH3_SOURCE_END_POINTER;
	vu32 ALT_CH3_DEST_END_POINTER;
	vu32 ALT_CH3_CONTROL;
	vu32 ALT_CH3_UNUSED;
		vu32 ALT_CH4_SOURCE_END_POINTER;
	vu32 ALT_CH4_DEST_END_POINTER;
	vu32 ALT_CH4_CONTROL;
	vu32 ALT_CH4_UNUSED;
		vu32 ALT_CH5_SOURCE_END_POINTER;
	vu32 ALT_CH5_DEST_END_POINTER;
	vu32 ALT_CH5_CONTROL;
	vu32 ALT_CH5_UNUSED;
		vu32 ALT_CH6_SOURCE_END_POINTER;
	vu32 ALT_CH6_DEST_END_POINTER;
	vu32 ALT_CH6_CONTROL;
	vu32 ALT_CH6_UNUSED;
		vu32 ALT_CH7_SOURCE_END_POINTER;
	vu32 ALT_CH7_DEST_END_POINTER;
	vu32 ALT_CH7_CONTROL;
	vu32 ALT_CH7_UNUSED;
		vu32 ALT_CH8_SOURCE_END_POINTER;
	vu32 ALT_CH8_DEST_END_POINTER;
	vu32 ALT_CH8_CONTROL;
	vu32 ALT_CH8_UNUSED;
		vu32 ALT_CH9_SOURCE_END_POINTER;
	vu32 ALT_CH9_DEST_END_POINTER;
	vu32 ALT_CH9_CONTROL;
	vu32 ALT_CH9_UNUSED;
		vu32 ALT_CH10_SOURCE_END_POINTER;
	vu32 ALT_CH10_DEST_END_POINTER;
	vu32 ALT_CH10_CONTROL;
	vu32 ALT_CH10_UNUSED;
		vu32 ALT_CH11_SOURCE_END_POINTER;
	vu32 ALT_CH11_DEST_END_POINTER;
	vu32 ALT_CH11_CONTROL;
	vu32 ALT_CH11_UNUSED;
		vu32 ALT_CH12_SOURCE_END_POINTER;
	vu32 ALT_CH12_DEST_END_POINTER;
	vu32 ALT_CH12_CONTROL;
	vu32 ALT_CH12_UNUSED;
		vu32 ALT_CH13_SOURCE_END_POINTER;
	vu32 ALT_CH13_DEST_END_POINTER;
	vu32 ALT_CH13_CONTROL;
	vu32 ALT_CH13_UNUSED;
		vu32 ALT_CH14_SOURCE_END_POINTER;
	vu32 ALT_CH14_DEST_END_POINTER;
	vu32 ALT_CH14_CONTROL;
	vu32 ALT_CH14_UNUSED;
		vu32 ALT_CH15_SOURCE_END_POINTER;
	vu32 ALT_CH15_DEST_END_POINTER;
	vu32 ALT_CH15_CONTROL;
	vu32 ALT_CH15_UNUSED;
		vu32 ALT_CH16_SOURCE_END_POINTER;
	vu32 ALT_CH16_DEST_END_POINTER;
	vu32 ALT_CH16_CONTROL;
	vu32 ALT_CH16_UNUSED;
		vu32 ALT_CH17_SOURCE_END_POINTER;
	vu32 ALT_CH17_DEST_END_POINTER;
	vu32 ALT_CH17_CONTROL;
	vu32 ALT_CH17_UNUSED;
		vu32 ALT_CH18_SOURCE_END_POINTER;
	vu32 ALT_CH18_DEST_END_POINTER;
	vu32 ALT_CH18_CONTROL;
	vu32 ALT_CH18_UNUSED;
		vu32 ALT_CH19_SOURCE_END_POINTER;
	vu32 ALT_CH19_DEST_END_POINTER;
	vu32 ALT_CH19_CONTROL;
	vu32 ALT_CH19_UNUSED;
		vu32 ALT_CH20_SOURCE_END_POINTER;
	vu32 ALT_CH20_DEST_END_POINTER;
	vu32 ALT_CH20_CONTROL;
	vu32 ALT_CH20_UNUSED;
		vu32 ALT_CH21_SOURCE_END_POINTER;
	vu32 ALT_CH21_DEST_END_POINTER;
	vu32 ALT_CH21_CONTROL;
	vu32 ALT_CH21_UNUSED;
		vu32 ALT_CH22_SOURCE_END_POINTER;
	vu32 ALT_CH22_DEST_END_POINTER;
	vu32 ALT_CH22_CONTROL;
	vu32 ALT_CH22_UNUSED;
		vu32 ALT_CH23_SOURCE_END_POINTER;
	vu32 ALT_CH23_DEST_END_POINTER;
	vu32 ALT_CH23_CONTROL;
	vu32 ALT_CH23_UNUSED;
		vu32 ALT_CH24_SOURCE_END_POINTER;
	vu32 ALT_CH24_DEST_END_POINTER;
	vu32 ALT_CH24_CONTROL;
	vu32 ALT_CH24_UNUSED;
		vu32 ALT_CH25_SOURCE_END_POINTER;
	vu32 ALT_CH25_DEST_END_POINTER;
	vu32 ALT_CH25_CONTROL;
	vu32 ALT_CH25_UNUSED;
		vu32 ALT_CH26_SOURCE_END_POINTER;
	vu32 ALT_CH26_DEST_END_POINTER;
	vu32 ALT_CH26_CONTROL;
	vu32 ALT_CH26_UNUSED;
		vu32 ALT_CH27_SOURCE_END_POINTER;
	vu32 ALT_CH27_DEST_END_POINTER;
	vu32 ALT_CH27_CONTROL;
	vu32 ALT_CH27_UNUSED;
		vu32 ALT_CH28_SOURCE_END_POINTER;
	vu32 ALT_CH28_DEST_END_POINTER;
	vu32 ALT_CH28_CONTROL;
	vu32 ALT_CH28_UNUSED;
		vu32 ALT_CH29_SOURCE_END_POINTER;
	vu32 ALT_CH29_DEST_END_POINTER;
	vu32 ALT_CH29_CONTROL;
	vu32 ALT_CH29_UNUSED;
		vu32 ALT_CH30_SOURCE_END_POINTER;
	vu32 ALT_CH30_DEST_END_POINTER;
	vu32 ALT_CH30_CONTROL;
	vu32 ALT_CH30_UNUSED;
		vu32 ALT_CH31_SOURCE_END_POINTER;
	vu32 ALT_CH31_DEST_END_POINTER;
	vu32 ALT_CH31_CONTROL;
	vu32 ALT_CH31_UNUSED;
} DMA_AltData_TypeDef;


typedef struct
{
	vu32 DATA;
	vu32 OE;
	vu32 FUNC;
	vu32 ANALOG;
	vu32 PULL;
	vu32 PD;
	vu32 PWR;
	vu32 GFEN;
} GPIO_TypeDef;

typedef struct
{
	vu32 NAND_CYCLES;
	vu32 CONTROL;
} EXTBUS_TypeDef;

typedef struct
{
	vu32 CLOCK_STATUS;
	vu32 PLL_CONTROL;
	vu32 HS_CONTROL;
	vu32 CPU_CLOCK;
	vu32 USB_CLOCK;
	vu32 ADC_MCO_CLOCK;
	vu32 RTC_CLOCK;
	vu32 PER_CLOCK;
	vu32 CAN_CLOCK;
	vu32 TIM_CLOCK;
	vu32 UART_CLOCK;
	vu32 SSP_CLOCK;
} RSTCLK_TypeDef;

typedef struct
{
	vu32 DR;
	vu32 SRCR;
	vu32 RESERVED0[4];
	vu32 FR;
	vu32 RESERVED1;
	vu32 ILPR;
	vu32 IBRD;
	vu32 FBRD;
	vu32 LCR_H;
	vu32 CR;
	vu32 IFLS;
	vu32 IMSC;
	vu32 RIS;
	vu32 MIS;
	vu32 ICR;
	vu32 DMACR;
} UART_TypeDef;

typedef struct
{
	vu32 PERIPHID0;
	vu32 PERIPHID1;
	vu32 PERIPHID2;
	vu32 PERIPHID3;
	vu32 PCELLID0;
	vu32 PCELLID1;
	vu32 PCELLID2;
	vu32 PCELLID3;
} UARTTEST_TypeDef;

typedef struct
{
	vu32 SSPCR0;
	vu32 SSPCR1;
	vu32 SSPDR;
	vu32 SSPSR;
	vu32 SSPCPSR;
	vu32 SSPIMSC;
	vu32 SSPRIS;
	vu32 SSPMIS;
	vu32 SSPICR;
	vu32 SSPDMACR;
} SSP_TypeDef;

typedef struct
{
	vu32 PERIPHID0;
	vu32 PERIPHID1;
	vu32 PERIPHID2;
	vu32 PERIPHID3;
	vu32 PCELLID0;
	vu32 PCELLID1;
	vu32 PCELLID2;
	vu32 PCELLID3;
} SSPTEST_TypeDef;

/*-------------------------Universal Serial Bus-------------------------------*/
typedef struct
{
u32 ENDPOINT_CONTROL_REG;				//[4:0] - R/W
u32 ENDPOINT_STATUS_REG;				//[7:0] - R/W
u32 ENDPOINT_TRANSTYPE_STATUS_REG;		//[1:0] - R/W
u32 ENDPOINT_NAK_TRANSTYPE_STATUS_REG;	//[1:0] - R/W
}
EndPointStatusRegs;

typedef struct
{
u32 EP_RX_FIFO_DATA;					//[7:0] - R/W
u32 RESERVED1;
u32 EP_RX_FIFO_DATA_COUNTL;				//[15:0] - R/W
u32 EP_RX_FIFO_DATA_COUNTH;				//[15:0] - R/W
u32 EP_RX_FIFO_CONTROL_REG;				//[0:0] - R/W
u32 RESERVED2[11];					  
u32 EP_TX_FIFO_DATA;                    //[7:0] - R/W
u32 RESERVED4[3];
u32 EP_TX_FIFO_CONTROL_REG;		   	    //[0:0] - R/W
u32 RESERVED5[11];
}
EndPointFifoRegs;  

typedef struct
{
//Host Regs
u32 HOST_TX_CONTROL_REG;			//[3:0] - R/W
u32 HOST_TX_TRANS_TYPE_REG;			//[1:0] - R/W
u32 HOST_TX_LINE_CONTROL_REG;		//[4:0] - R/W
u32 HOST_TX_SOF_ENABLE_REG;			//[0:0] - R/W
u32 HOST_TX_ADDR_REG;				//[6:0] - R/W
u32 HOST_TX_ENDP_REG;				//[3:0] - R/W
u32 HOST_FRAME_NUM_REGL;			//[10:0]- R/W
u32 HOST_FRAME_NUM_REGH;			//[10:0]- R/W
u32 HOST_INTERRUPT_STATUS_REG;		//[3:0] - R/O
u32 HOST_INTERRUPT_MASK_REG;		//[3:0] - R/W
u32 HOST_RX_STATUS_REG;				//[7:0] - R/O
u32 HOST_RX_PID_REG;				//[3:0] - R/O
u32 HOST_RX_ADDR_REG;				//[6:0] - R/O
u32 HOST_RX_ENDP_REG;				//[3:0] - R/O
u32 HOST_RX_CONNECT_STATE_REG;		//[1:0] - R/O
u32 HOST_SOF_TIMER_MSB_REG;			//[7:0] - R/O
u32 RESERVED1[16];
u32 HOST_RX_FIFO_DATA;				//[7:0] - R/O
u32 RESERVED2;
u32 HOST_RX_FIFO_DATA_COUNTL;		//[15:0] - R/O
u32 HOST_RX_FIFO_DATA_COUNTH;		//[15:0] - R/O
u32 HOST_RX_FIFO_CONTROL_REG;		//[0:0] - R/W
u32 RESERVED3[11];
u32 HOST_TX_FIFO_DATA;				//[7:0] - R/W
u32 RESERVED4[3];
u32 HOST_TX_FIFO_CONTROL_REG;  		//[0:0] - R/W
u32 RESERVED5[11];
//Slave Regs
EndPointStatusRegs EndPointStatusRegs[4];
u32 SC_CONTROL_REG; 				//[5:0] - R/W
u32 SC_LINE_STATUS_REG;				//[1:0] - R/W
u32 SC_INTERRUPT_STATUS_REG;		//[5:0] - R/W
u32 SC_INTERRUPT_MASK_REG;			//[5:0] - R/W
u32 SC_ADDRESS; 					//[6:0] - R/W
u32 SC_FRAME_NUML;		            //[10:0] - R/W
u32 SC_FRAME_NUMH;		            //[10:0] - R/W
u32 RESERVED6[9];
EndPointFifoRegs EndPointFifoRegs[4]; 
	  

u32 HOST_SLAVE_CONTROL_REG;    		//[1:0] - R/W
u32 HOST_SLAVE_VERSION_REG;			//[7:0] - R/O
} USB_TypeDef;

/******************************************************************************/
/*                         Peripheral memory map                              */
/******************************************************************************/
#define SRAM_BASE             	((u32)0x20000000)
#define PERIPH_BASE           	((u32)0x40000000)
#define EXT_BUS0_BASE			((u32)0x60000000)
#define EXT_BUS1_BASE			((u32)0x90000000)
//#define SYSTEM_BASE				((u32)0xE0000000)

/* Peripheral memory map */
#define APB1PERIPH_BASE       	PERIPH_BASE
#define APB2PERIPH_BASE       	(PERIPH_BASE + 0x10000)
#define AHBPERIPH_BASE        	(PERIPH_BASE + 0x20000)

#define DMA_BASE             	(AHBPERIPH_BASE + 0x8000)
#define DMA_TEST_BASE		 	(DMA_BASE + 0x0E00)
#define DMA_PERIPHID_BASE    	(DMA_BASE + 0x0FD0)
#define DMA_PRIMECELLID_BASE 	(DMA_BASE + 0x0FF0)

#define GPIOA_BASE				(PERIPH_BASE + 0xA8000)
#define GPIOB_BASE				(PERIPH_BASE + 0xB0000)
#define GPIOC_BASE				(PERIPH_BASE + 0xB8000)
#define GPIOD_BASE				(PERIPH_BASE + 0xC0000)
#define GPIOE_BASE				(PERIPH_BASE + 0xC8000)
#define GPIOF_BASE				(PERIPH_BASE + 0xE8000)

#define EXTBUS_BASE				(PERIPH_BASE + 0xF0050)

#define UART1_BASE				(PERIPH_BASE + 0x30000)
#define UART1TEST_BASE			(PERIPH_BASE + 0x30FE0)
#define UART2_BASE				(PERIPH_BASE + 0x38000)
#define UART2TEST_BASE			(PERIPH_BASE + 0x38FE0)
#define USB_BASE                (PERIPH_BASE + 0x10000)

#define SSP1_BASE				(PERIPH_BASE + 0x40000)
#define SSP1TEST_BASE			(PERIPH_BASE + 0x40FE0)
#define SSP2_BASE				(PERIPH_BASE + 0xA0000)
#define SSP2TEST_BASE			(PERIPH_BASE + 0xA0FE0)

/******************************************************************************/
/*                         Peripheral declaration                             */
/******************************************************************************/

//#ifdef _RSTCLK
#define RSTCLK					((RSTCLK_TypeDef *) AHBPERIPH_BASE)
//#endif //_RSTCLK

//#ifdef _DMA
#define DMA                		((DMA_Controller_TypeDef *) DMA_BASE)
#define DMA_Test				((DMA_Test_TypeDef *) DMA_TEST_BASE)
#define DMA_PeriphID       		((DMA_Periph_Identification_TypeDef *) DMA_PERIPHID_BASE)
#define DMA_PrimeCellID   		((DMA_PrimeCell_Identification_TypeDef *) DMA_PRIMECELLID_BASE)
//#define DMA_PrimaryControlData	((DMA_PrimaryData_TypeDef *) SRAM_BASE + 0x5000)
//#define DMA_AltControlData		((DMA_AltData_TypeDef *) SRAM_BASE + 0x5200)
//#endif //_DMA

//#ifdef _GPIO
#define GPIOA	((GPIO_TypeDef *) GPIOA_BASE)
#define GPIOB	((GPIO_TypeDef *) GPIOB_BASE)
#define GPIOC	((GPIO_TypeDef *) GPIOC_BASE)
#define GPIOD	((GPIO_TypeDef *) GPIOD_BASE)
#define GPIOE	((GPIO_TypeDef *) GPIOE_BASE)
#define GPIOF	((GPIO_TypeDef *) GPIOF_BASE)
//#endif //_GPIO

//#ifdef _EXTBUS
#define EXTBUS	((EXTBUS_TypeDef *) EXTBUS_BASE)
//#endif //_EXTBUS

//#ifdef _UART1
#define UART1		((UART_TypeDef *) UART1_BASE)
#define UART1TEST	((UARTTEST_TypeDef *) UART1TEST_BASE)
//#endif //_UART1
//#ifdef _UART2
#define UART2		((UART_TypeDef *) UART2_BASE)
#define UART2TEST	((UARTTEST_TypeDef *) UART2TEST_BASE)
//#endif //_UART2

//#ifdef _USB
  #define USB       ((USB_TypeDef *) USB_BASE)
//#endif // USB

//#ifdef _SSP1
#define SSP1		((SSP_TypeDef *) SSP1_BASE)
#define SSP1TEST	((SSPTEST_TypeDef *) SSP1TEST_BASE)
//#endif //_SSP1
//#ifdef _SSP2
#define SSP2		((SSP_TypeDef *) SSP2_BASE)
#define SSP2TEST	((SSPTEST_TypeDef *) SSP2TEST_BASE)
//#endif //_SSP2

/* Exported constants --------------------------------------------------------*/
/* Exported macro ------------------------------------------------------------*/
#define HWREG(x)		(*((volatile unsigned long *)(x)))

/* Exported functions ------------------------------------------------------- */

#endif /* __1986_MAP_H */

/**********************END OF FILE****/
